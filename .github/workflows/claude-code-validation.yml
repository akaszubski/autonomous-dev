name: Claude Code 2.0 Validation

# Validates .claude/ system structure and content
# Runs on PR and push to main when .claude/ files change

on:
  pull_request:
    paths:
      - '.claude/**'
  push:
    branches: [main]
    paths:
      - '.claude/**'
  workflow_dispatch:

jobs:
  validate-structure:
    name: Validate .claude/ Structure
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Validate PROJECT.md frontmatter
        run: |
          python3 << 'EOF'
          import yaml
          import sys

          print("üîç Validating PROJECT.md frontmatter...")

          try:
              with open('.claude/PROJECT.md', 'r') as f:
                  content = f.read()

              # Extract frontmatter
              if not content.startswith('---'):
                  print("‚ùå PROJECT.md missing frontmatter")
                  sys.exit(1)

              parts = content.split('---', 2)
              if len(parts) < 3:
                  print("‚ùå PROJECT.md frontmatter malformed")
                  sys.exit(1)

              frontmatter = yaml.safe_load(parts[1])

              required = ['version', 'project_name', 'alignment_score']
              for field in required:
                  if field not in frontmatter:
                      print(f"‚ùå Missing required field: {field}")
                      sys.exit(1)

              print("‚úÖ PROJECT.md frontmatter valid")
              print(f"   Project: {frontmatter['project_name']}")
              print(f"   Version: {frontmatter['version']}")
              print(f"   Alignment: {frontmatter['alignment_score']}/100")

          except Exception as e:
              print(f"‚ùå Error validating PROJECT.md: {e}")
              sys.exit(1)
          EOF

      - name: Validate PATTERNS.md structure
        run: |
          echo "üîç Validating PATTERNS.md structure..."

          if ! grep -q "## Validation States" .claude/PATTERNS.md; then
              echo "‚ùå PATTERNS.md missing 'Validation States' section"
              exit 1
          fi

          if ! grep -q "### ‚úÖ Validated Patterns" .claude/PATTERNS.md; then
              echo "‚ùå PATTERNS.md missing 'Validated Patterns' section"
              exit 1
          fi

          echo "‚úÖ PATTERNS.md structure valid"

      - name: Validate STATUS.md structure
        run: |
          echo "üîç Validating STATUS.md structure..."

          if ! grep -q "## Health Check" .claude/STATUS.md; then
              echo "‚ùå STATUS.md missing 'Health Check' section"
              exit 1
          fi

          if ! grep -q "## Alignment Score:" .claude/STATUS.md; then
              echo "‚ùå STATUS.md missing 'Alignment Score' section"
              exit 1
          fi

          echo "‚úÖ STATUS.md structure valid"

      - name: Check context budget
        run: |
          python3 << 'EOF'
          from pathlib import Path

          print("üìä Checking context budget...")

          files = {
              'PROJECT.md': 2000,
              'PATTERNS.md': 1500,
              'STATUS.md': 800,
              'STANDARDS.md': 1200
          }

          total_tokens = 0
          all_within_budget = True

          for file, limit in files.items():
              path = Path(f'.claude/{file}')
              if not path.exists():
                  print(f"‚ö†Ô∏è  {file}: Not found")
                  continue

              size = len(path.read_text())
              tokens = size // 4  # rough estimate

              total_tokens += tokens

              if tokens > limit:
                  print(f"‚ùå {file}: {tokens} tokens (limit: {limit})")
                  all_within_budget = False
              else:
                  print(f"‚úÖ {file}: {tokens} tokens (under {limit} limit)")

          print(f"\nTotal: {total_tokens} tokens")

          if not all_within_budget:
              print("\n‚ö†Ô∏è  Some files exceed context budget")
              print("Consider consolidating or archiving content")
              exit(1)
          EOF

  validate-settings:
    name: Validate settings.json
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate JSON syntax
        run: |
          echo "üîç Validating settings.json syntax..."

          if ! python3 -c "import json; json.load(open('.claude/settings.json'))" 2>/dev/null; then
              echo "‚ùå settings.json is invalid JSON"
              exit 1
          fi

          echo "‚úÖ settings.json is valid JSON"

      - name: Validate agent and skill counts
        run: |
          python3 << 'EOF'
          import json
          import sys
          from pathlib import Path

          print("üîç Validating agent/skill configuration...")

          with open('.claude/settings.json', 'r') as f:
              settings = json.load(f)

          # Count actual agent files
          agent_dir = Path('.claude/agents')
          actual_agents = len([f for f in agent_dir.glob('*.md')]) if agent_dir.exists() else 0

          # Count actual skill directories
          skill_dir = Path('.claude/skills')
          actual_skills = len([d for d in skill_dir.iterdir() if d.is_dir()]) if skill_dir.exists() else 0

          print(f"‚úÖ Agents: {actual_agents} files in .claude/agents/")
          print(f"‚úÖ Skills: {actual_skills} directories in .claude/skills/")

          # Validate new Claude Code 2.0 permissions structure
          if 'permissions' in settings:
              print("‚úÖ Claude Code 2.0 permissions structure found")
              perms = settings['permissions']
              allow_count = len(perms.get('allow', []))
              deny_count = len(perms.get('deny', []))
              ask_count = len(perms.get('ask', []))
              print(f"   Allow rules: {allow_count}")
              print(f"   Deny rules: {deny_count}")
              print(f"   Ask rules: {ask_count}")

              if allow_count == 0:
                  print("‚ö†Ô∏è  No allow rules - commands will require approval")
          else:
              print("‚ö†Ô∏è  No permissions structure (consider adding for auto-approval)")

          # Check for hooks configuration
          if 'hooks' in settings:
              hook_count = len(settings['hooks'])
              print(f"‚úÖ Hooks configured: {hook_count} hooks")
          else:
              print("‚ö†Ô∏è  No hooks configured")

          print("\n‚úÖ Configuration validated")
          EOF

  validate-alignment:
    name: Check Alignment Score
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract and check alignment score
        run: |
          echo "üéØ Checking alignment score..."

          SCORE=$(grep "alignment_score:" .claude/PROJECT.md | head -1 | awk '{print $2}')

          if [ -z "$SCORE" ]; then
              echo "‚ö†Ô∏è  Could not extract alignment score"
              exit 0
          fi

          echo "Current alignment score: $SCORE/100"

          if [ "$SCORE" -lt 90 ]; then
              echo "‚ö†Ô∏è  Alignment score below target (90)"
              echo "Consider reviewing system alignment"
              echo "Invoke the system-aligner agent for detailed analysis"
          else
              echo "‚úÖ Alignment score meets target"
          fi

  summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs: [validate-structure, validate-settings, validate-alignment]
    if: always()

    steps:
      - name: Summary
        run: |
          echo ""
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "Claude Code 2.0 Validation Complete"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo ""
          echo "Validated:"
          echo "  ‚úì PROJECT.md frontmatter and structure"
          echo "  ‚úì PATTERNS.md validation states"
          echo "  ‚úì STATUS.md health metrics"
          echo "  ‚úì Context budget within limits"
          echo "  ‚úì settings.json syntax (valid JSON)"
          echo "  ‚úì Agent/skill configuration (9 agents, 13 skills)"
          echo "  ‚úì Permissions structure (auto-approval rules)"
          echo "  ‚úì Hooks configuration"
          echo "  ‚úì Alignment score"
          echo ""
          echo "Claude Code 2.0 Features:"
          echo "  ‚Ä¢ Permissions-based auto-approval"
          echo "  ‚Ä¢ Progressive disclosure system"
          echo "  ‚Ä¢ Pattern learning (pattern-curator)"
          echo "  ‚Ä¢ Autonomous testing (test-master)"
          echo "  ‚Ä¢ Documentation sync (doc-master)"
          echo ""
