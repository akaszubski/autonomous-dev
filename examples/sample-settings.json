{
  "_comment": "Sample .claude/settings.local.json for autonomous-dev plugin",
  "_note": "This file shows common configuration options. Copy and customize for your project.",

  "permissions": {
    "allow": [
      "WebSearch",
      "Bash",
      "Read",
      "Write",
      "Edit",
      "Glob",
      "Grep",
      "Task",
      "WebFetch(domain:www.thoughtworks.com)",
      "WebFetch(domain:medium.com)",
      "WebFetch(domain:www.anthropic.com)"
    ],
    "deny": [
      "Read(~/.ssh/*)",
      "Read(~/.aws/*)",
      "Read(**/.env)",
      "Write(~/.ssh/*)",
      "Write(~/.aws/*)"
    ],
    "ask": []
  },

  "hooks": {
    "_comment": "UserPromptSubmit: Runs when you send a message",
    "UserPromptSubmit": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "echo '\\n⭐ PROJECT.md-First Architecture (v2.0.0)\\n- PRIMARY MISSION: Read .claude/PROJECT.md and validate alignment before ANY work\\n- Agents (8): orchestrator (coordinator) → researcher → planner (opus) → test-master → implementer → reviewer → security-auditor (haiku) → doc-master (haiku)\\n- Commands: /align-project (3-phase safe alignment)\\n- Skills (6): python-standards, testing-guide, security-patterns, documentation-guide, research-patterns, engineering-standards\\n- GitHub: Optional sprint tracking (if .env configured)\\n- Context: Run /clear after each feature to maintain <8K tokens\\n'"
          }
        ]
      }
    ],

    "_comment": "SubagentStop: Runs when an agent completes",
    "SubagentStop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "python scripts/session_tracker.py subagent 'Subagent completed task'"
          }
        ]
      }
    ],

    "_comment": "PostToolUse: Runs after specific tools are used",
    "PostToolUse": [
      {
        "_comment": "Auto-format after Write",
        "matcher": "Write",
        "hooks": [
          {
            "type": "command",
            "command": "python .claude/hooks/auto_format.py"
          }
        ]
      },
      {
        "_comment": "Auto-format after Edit",
        "matcher": "Edit",
        "hooks": [
          {
            "type": "command",
            "command": "python .claude/hooks/auto_format.py"
          }
        ]
      }
    ]
  },

  "_customization_options": {
    "_note": "Common customizations (not active, just examples)",

    "disable_auto_format": {
      "_comment": "To disable auto-formatting, remove PostToolUse hooks above"
    },

    "add_auto_test_hook": {
      "_example": {
        "matcher": "Write",
        "hooks": [
          {
            "type": "command",
            "command": "python .claude/hooks/auto_test.py"
          }
        ]
      }
    },

    "add_custom_validation": {
      "_example": {
        "matcher": "Write",
        "hooks": [
          {
            "type": "command",
            "command": "python .claude/hooks/custom_validation.py"
          }
        ]
      }
    },

    "session_start_hook": {
      "_example": {
        "SessionStart": [
          {
            "hooks": [
              {
                "type": "command",
                "command": "echo 'Welcome! Remember to run /clear after each feature to maintain context budget.'"
              }
            ]
          }
        ]
      }
    }
  },

  "_agent_configuration": {
    "_note": "Agents are configured in .claude/agents/*.md files",
    "_available_agents": [
      "orchestrator",
      "planner",
      "researcher",
      "test-master",
      "implementer",
      "reviewer",
      "security-auditor",
      "doc-master"
    ],
    "_customize": "Edit .claude/agents/AGENT_NAME.md to customize agent behavior"
  },

  "_skill_configuration": {
    "_note": "Skills are configured in .claude/skills/*/SKILL.md files",
    "_available_skills": [
      "python-standards",
      "testing-guide",
      "security-patterns",
      "documentation-guide",
      "research-patterns",
      "engineering-standards"
    ],
    "_customize": "Edit .claude/skills/SKILL_NAME/SKILL.md to customize skill knowledge"
  },

  "_command_configuration": {
    "_note": "Commands are configured in .claude/commands/*.md files",
    "_available_commands": [
      "/test",
      "/commit",
      "/format",
      "/security-scan",
      "/full-check",
      "/auto-implement",
      "/align-project",
      "/align-project-safe"
    ],
    "_customize": "Edit .claude/commands/COMMAND_NAME.md to customize command behavior"
  },

  "_project_configuration": {
    "_note": "Project goals and scope defined in .claude/PROJECT.md",
    "_critical": "UPDATE PROJECT.md FIRST! It drives all alignment validation.",
    "_sections": [
      "GOALS - What you're building and why",
      "SCOPE - What's in/out of scope",
      "CONSTRAINTS - Technical and business limits",
      "ARCHITECTURE - High-level design",
      "PATTERNS - Preferred patterns and anti-patterns"
    ]
  },

  "_github_integration": {
    "_note": "Optional GitHub integration for issue tracking",
    "_setup": "Copy .env.example to .env and add GITHUB_TOKEN",
    "_features": [
      "Auto-create issues from test failures",
      "Track progress via GitHub Issues",
      "Link commits to issues"
    ],
    "_optional": "Works fine without GitHub integration"
  },

  "_performance_tuning": {
    "_note": "Tips for optimal performance",
    "_tips": [
      "Run /clear after each feature to maintain context budget",
      "Use session logs (docs/sessions/) instead of verbose output",
      "Disable hooks you don't need",
      "Customize coverage thresholds in hooks",
      "Use specific test commands (/test unit vs /test all)"
    ]
  }
}
